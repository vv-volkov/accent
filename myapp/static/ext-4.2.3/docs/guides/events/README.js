Ext.data.JsonP.events({"guide":"<h1>Using Events</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/events-section-1'>What Are Events?</a></li>\n<li><a href='#!/guide/events-section-2'>Listening to Events</a></li>\n<li><a href='#!/guide/events-section-3'>Adding Listeners Later</a></li>\n<li><a href='#!/guide/events-section-4'>Removing Listeners</a></li>\n<li><a href='#!/guide/events-section-5'>Scope Listener Option</a></li>\n<li><a href='#!/guide/events-section-6'>Listening to an Event Once</a></li>\n<li><a href='#!/guide/events-section-7'>Using a Buffer Configuration</a></li>\n<li><a href='#!/guide/events-section-8'>Firing Your Own Events</a></li>\n<li><a href='#!/guide/events-section-9'>Listening for DOM Events</a></li>\n</ol>\n</div>\n\n<p>The Components and Classes of Ext JS fire a broad range of events at various points\nin their lifecycle. Events allow your code to react to changes around your application,\nand are a key concept within Ext JS.</p>\n\n<h2 id='events-section-1'>What Are Events?</h2>\n\n<p>Events fire whenever something interesting happens to one of your Classes.\nFor example, when a Component renders to the screen, Ext JS fires an\nevent after the render completes. We can listen for that event\nby adding a simple <code>listeners</code> config:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    html: 'My Panel',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    listeners: {\n        afterrender: function() {\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('We have been rendered');\n        }\n    }\n});\n</code></pre>\n\n<p>In this example, when you click the <b>Live Preview</b> button, the Panel\nrenders to the screen, followed by the defined alert message. All events\nfired by a class are listed in the class’s API page - for example,\n<code><a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a></code> currently has 45 events.</p>\n\n<h2 id='events-section-2'>Listening to Events</h2>\n\n<p>While <code>afterrender</code> is useful in some cases, you may use other events\nmore frequently. For instance, a <code>Button</code> fires click events\nwhen clicked:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>, {\n    text: 'Click Me',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    listeners: {\n        click: function() {\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('I was clicked!');\n        }\n    }\n});\n</code></pre>\n\n<p>A component may contain as many event listeners as needed. In the following example,\nwe confound users by calling <code>this.hide()</code> inside our mouseover\nlistener to hide a Button. We then display the button again a second later.\nWhen <code>this.hide()</code> is called, the Button is hidden and the <code>hide</code>\nevent fires. The hide event triggers our <code>hide</code> listener,\nwhich waits one second and displays the Button again:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'My Button',\n    listeners: {\n        mouseover: function() {\n            this.hide();\n        },\n        hide: function() {\n            // Waits 1 second (1000ms), then shows the button again\n            <a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n                this.show();\n            }, 1000, this);\n        }\n    }\n});\n</code></pre>\n\n<p>Event listeners are called every time an event is fired, so you can continue hiding and\nshowing the button for as long as you desire.</p>\n\n<h2 id='events-section-3'>Adding Listeners Later</h2>\n\n<p>In previous examples, we passed listeners to the component when the class was instantiated.\nHowever, If we already have an instance, we can add listeners using the <code>.on</code>\nfunction:</p>\n\n<pre><code>var button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'My Button'\n});\n\nbutton.on('click', function() {\n    <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Event listener attached by .on');\n});\n</code></pre>\n\n<p>You can also specify multiple listeners by using the <code>.on</code> method,\nsimilar to using a listener configuration.  The following revisits\nthe previous example that set the button’s visibility with a mouseover event:</p>\n\n<pre><code>var button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'My Button'\n});\n\nbutton.on({\n    mouseover: function() {\n        this.hide();\n    },\n    hide: function() {\n        <a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n            this.show();\n        }, 1000, this);\n    }\n});\n</code></pre>\n\n<h2 id='events-section-4'>Removing Listeners</h2>\n\n<p>Just as we can add listeners at any time, we can also remove them. This time we use\nthe <code>.un</code> function. To remove a listener, we need a reference to its function.\nIn the previous examples, we passed a function into the listener’s\nobject or the <code>.on</code> call. This time, we create the function earlier and link\nit into a variable called <code>doSomething</code>, which contains our custom function.</p>\n\n<p>Because we initially pass the new <code>doSomething</code> function into our listeners\nobject, the code begins as before. With the eventual addition of\nan <code><a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a></code> function, clicking the button in the first\n3 seconds yields an alert message. However, after 3\nseconds the listener is removed so nothing happens:</p>\n\n<pre><code>var doSomething = function() {\n    <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('listener called');\n};\n\nvar button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'My Button',\n    listeners: {\n        click: doSomething,\n    }\n});\n\n<a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n    button.un('click', doSomething);\n}, 3000);\n</code></pre>\n\n<h2 id='events-section-5'>Scope Listener Option</h2>\n\n<p>Scope sets the value of this inside your handler function. By default, this is set to the\ninstance of the class firing the event.  This is often, but not always, the functionality\nthat you want. This functionality allows us to\ncall <code>this.hide()</code> to hide the button in the\nsecond example earlier in this guide.</p>\n\n<p>In the following example, we create a Button and a Panel.  We then listen to the Button's\nclick event with the handler running in Panel's scope. In order to do this, we need to\npass in an object instead of a handler function.  This object contains the function AND\nthe scope:</p>\n\n<pre><code>var panel = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    html: 'Panel HTML'\n});\n\nvar button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Click Me'\n});\n\nbutton.on({\n    click: {\n        scope: panel,\n        fn: function() {\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>(this.getXType());\n        }\n    }\n});\n</code></pre>\n\n<p>When you run this example, the value of this in the click handler is the Panel. To see\nthis illustrated, we  alert the xType of the scoped component. When the button is clicked,\nwe should see the Panel xType being alerted.</p>\n\n<h2 id='events-section-6'>Listening to an Event Once</h2>\n\n<p>You may want to listen to one event only once. The event itself might fire any number of\ntimes, but we only want to listen to it once. The following codes illustrates this\nsituation:</p>\n\n<pre><code>var button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Click Me',\n    listeners: {\n        click: {\n            single: true,\n            fn: function() {\n                <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('I will say this only once');\n            }\n        }\n    }\n});\n</code></pre>\n\n<h2 id='events-section-7'>Using a Buffer Configuration</h2>\n\n<p>For events that fire many times in short succession, we can reduce the number of times our\nlistener is called by using a buffer configuration. In this case our button's click\nlistener is only invoked once every 2 seconds, regardless of how many times you click it:</p>\n\n<pre><code>var button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Click Me',\n    listeners: {\n        click: {\n            buffer: 200,\n            fn: function() {\n                <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('I say this only once every 2 seconds');\n            }\n        }\n    }\n});\n</code></pre>\n\n<h2 id='events-section-8'>Firing Your Own Events</h2>\n\n<p>Firing your own events is done by calling <code>fireEvent</code> with\nan event name. In the following\nexample we fire an event called myEvent that passes two arguments - the button itself and\na random number between 1 and 100:</p>\n\n<pre><code>var button = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: \"Just wait 2 seconds\",\n    listeners: {\n        myEvent: function(button, points) {\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('myEvent fired! You score ' + points + ' points');\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n    var number = Math.ceil(Math.random() * 100);\n\n    button.fireEvent('myEvent', button, number);\n}, 2000);\n</code></pre>\n\n<p>Once again we used <code><a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a></code> to delay the function that\nfires our custom event, this time\nby 2 seconds. When the event fires, the <code>myEvent</code> listener\npicks up on it and displays the arguments we passed in.</p>\n\n<h2 id='events-section-9'>Listening for DOM Events</h2>\n\n<p>Any DOM element may have an event attached it to using <code>on</code>\nand targeting the component’s element.</p>\n\n<p>Not every ExtJS component raises every event.  However, by targeting the\ncontainer’s element, we can listen to DOM events very easily. In this\nexample, we want to listen the the <code>click</code> on a Component. But Components\ndon't provide a <code>click</code> event so we have to listen to its element named\n\"el\".</p>\n\n<pre><code>var component = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    html: 'Click Me!',\n    listeners: {\n        click: function(){\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('I have been clicked!');\n        },\n        element: 'el'\n    }\n});\n</code></pre>\n","title":"Events"});